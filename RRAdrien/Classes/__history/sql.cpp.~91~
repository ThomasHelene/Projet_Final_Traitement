//---------------------------------------------------------------------------

#pragma hdrstop

#include "sql.h"



//---------------------------------------------------------------------------
#pragma package(smart_init)

	bool Sql::OnConnect(string adress, string user,string mdp, string nameBDD){
			// Utiliser la librairie mysql pour se connecter
			bool etat;
			  if (!mysql_real_connect(this->sql, adress.c_str(), user.c_str(), mdp.c_str() , nameBDD.c_str(), 0, NULL, 0))
			   {
					etat = false;

			   }
			   else
			   {
					etat = true;

			   }
			   return etat;
	}



	vector< vector<std::string> >  Sql::GetRecette(std::string NomRecette)
	{


	   System::String requete;
	   requete="SELECT `ID-Recette`,`RFID`.`Numero`, `Nom`, `Bac n°1`, `Bac n°2`, `Bac n°3` FROM `Recette`,`RFID` WHERE `RFID`.`id`= `Recette`.`ID-RFID` AND `Nom`=' ";
	   requete+=
	   requete+="'";


	std::vector< std::vector<string> > resultatRequete;
	std::vector<string> copie;
	MYSQL_RES *res; /* holds the result set */
	MYSQL_ROW row;
	int nbColones=0;

	mysql_query(this->sql,requete.c_str());
	res = mysql_store_result(this->sql);
	//resultatRequete.resize(mysql_num_rows(res)); //commenter selon Mr Gremont
	nbColones =  mysql_num_fields(res);


	 while ((row = mysql_fetch_row(res))) {

	   for(int j = 0; j < nbColones; j++)
	   {
		   if(row[j] != NULL)
		   {
				copie.push_back(row[j]);
		   }
	   }

	   resultatRequete.push_back(copie);
	   copie.clear();
	}
	if(res != NULL)
	mysql_free_result(res);

	return resultatRequete;



	}


	Sql::Sql()
	{
		this->sql = new MYSQL();
		mysql_init(this->sql);



	}
	Sql::~Sql()
	{
		  mysql_close(this->sql);

	}

	bool Sql::CreerRecette(std::string temps1,std::string temps2,std::string temps3,std::string CodeRfid,std::string Nom)
	{
        // on Insère le code RFID en base
		std::string requete;
		requete="INSERT INTO `RFID`(`Numero`) VALUES ('";
		requete+=CodeRfid;
		requete+="')";

                   int test=mysql_query(this->sql,requete.c_str());




        // On récupère l'id correspondant au code RFID qu'on a rentré
		 std::string request;
		 request="SELECT `id` FROM `RFID` WHERE `Numero`='";
		 request+=CodeRfid;
         request+="' ORDER BY `id` DESC;";
		std::vector< std::vector<string> > RequestResult;

		MYSQL_RES *res; /* holds the result set */
		MYSQL_ROW row;
		int NbCol=0;

		mysql_query(this->sql,request.c_str());
		res = mysql_store_result(this->sql);
		int rows = mysql_num_rows(res);
		//RequestResult.resize(rows);
		NbCol =  mysql_num_fields(res);

		while ((row = mysql_fetch_row(res))) {
			std::vector<string> copie;
		   for(int x = 0; x < NbCol; x++)
		   {
			   if(row[x] != NULL)
			   {
					copie.push_back(row[x]);
			   }
		   }

		   RequestResult.push_back(copie);
		   //copie.clear();
		}
		if(res != NULL)
		mysql_free_result(res);

















        // On insère la recette

		requete="INSERT INTO `Recette`(`ID-RFID`,`Nom` ,`Bac n°1`, `Bac n°2`, `Bac n°3`) VALUES (";
		requete+=RequestResult[0][0]; // id récupérée précédemment
		requete+=",'";
		requete+=Nom;
		requete+="',";
		requete+=temps1;
		requete+=",";
		requete+=temps2;
		requete+=",";
        requete+=temps3;
		requete+=")";
            test=mysql_query(this->sql,requete.c_str());

		 if(test==0)
		 {
             return true;
		 }
		 else
		 {
             return false;
         }
	}
	bool Sql::SupprimerRecette()
	{

    }
